content1="Registering a cell type"
content2="Preview of built-in and custom cell types"
content3="Anatomy of a cell type"
content4="Registering a cell-type"
content5="When you create a custom cell type, a good idea is to assign it as an alias that will refer to this particular type definition.
      Handsontable defines 9 aliases by default:"
content6="autocomplete"
content7="Handsontable.cellTypes.autocomplete"
content8="checkbox"
content9="Handsontable.cellTypes.checkbox"
content10="date"
content11="Handsontable.cellTypes.date"
content12="dropdown"
content13="Handsontable.cellTypes.dropdown"
content14="handsontable"
content15="Handsontable.cellTypes.handsontable"
content16="numeric"
content17="Handsontable.cellTypes.numeric"
content18="password"
content19="Handsontable.cellTypes.password"
content20="text"
content21="Handsontable.cellTypes.text"
content22="time"
content23="Handsontable.cellTypes.time"
content24="It gives users a convenient way for defining which cell type should
      be used for describing cell properties. User doesn't need to
      know which part of code is responsible for rendering, validating or editing the cell value, he does
      not even need to know that there is any functions at all. What is
      more, you can change the cell behaviour associated with an alias without a
      need to change the code that defines a cell properties."
content25="Handsontable.cellTypes.registerCellType()"
content26="cellTypeName"
content27="type"
content28="editor"
content29="renderer"
content30="validator"
content31="cellTypeName"
content32="copyablePasswordType"
content33="copyable-password"
content34="Handsontable.cellTypes.registerCellType('copyable-password', {
  editor: copyablePasswordEditor,
  renderer: copyablePasswordRenderer,
});"
content35="Choose aliases wisely. If you register your cell type under name that is already registered, the target function will be
      overwritten:"
content36="Handsontable.cellTypes.registerCellType('password', {
  editor: copyablePasswordEditor,
  renderer: copyablePasswordRenderer,
});

// Now 'password' alias points to the newly created object, not Handsontable.cellTypes.password"
content37="So, unless you intentionally want to overwrite an existing alias, try to choose a unique name. A good practice is
      prefixing your aliases with some custom name (for example your GitHub username) to minimize the possibility of name
      collisions.
      This is especially important if you want to publish your cell type, because you never know aliases has been
      registered by the user who uses your cell type."
content38="Handsontable.cellTypes.registerCellType('copyable-password', {
  editor: copyablePasswordEditor,
  renderer: copyablePasswordRenderer,
});

// Someone might already registered such alias"
content39="Handsontable.cellTypes.registerCellType('my.copyable-password', {
  editor: copyablePasswordEditor,
  renderer: copyablePasswordRenderer,
});

// That's better."
content40="Using an alias"
content41="The final touch is to using the registered aliases, so that users can easily refer to it without the need
    to now the actual cell type object is."
content42="To sum up, a well prepared cell type object should look like this:"
content43="(function(Handsontable){
  var MyEditor = Handsontable.editors.TextEditor.prototype.extend();

  function customRenderer(hotInstance, td, row, column, prop, value, cellProperties) {
    // ...renderer logic
  }

  function customValidator(query, callback) {
    // ...validator logic
    callback(/* Pass `true` or `false` */);
  }

  // Register an alias
  Handsontable.cellTypes.registerCellType('my.custom', {
    editor: MyEditor,
    renderer: customRenderer,
    validator: customValidator,
    // You can add additional options to the cell type based on Handsontable settings
    className: 'my-cell',
    allowInvalid: true,
    // Or you can add custom properties which will be accessible in `cellProperties`
    myCustomCellState: 'complete',
  });

})(Handsontable);"
content44="From now on, you can use your cell definition like so:"
content45="var hot = new Handsontable(document.getElementById('container'), {
  data: someData,
  columns: [
    {
      type: 'my.custom'
    }
  ]
}); "
content46="Preview of built-in and custom cell types"
content47="The below example shows some of the built-in cell types (in other words,
      combinations of cell renderers and editors) available in Handsontable:"
content48="Text"
content49="Numeric"
content50="Checkbox"
content51="Date"
content52="Select"
content53="Dropdown"
content54="Autocomplete"
content55="Password"
content56="Handsontable in Handsontable"
content57="Custom"
content58="yellowRenderer"
content59="greenRenderer"
content60="
        var data = [
            {id: 1, name: 'Ted', isActive: true, color: 'orange', date: '2015-01-01'},
            {id: 2, name: 'John', isActive: false, color: 'black', date: null},
            {id: 3, name: 'Al', isActive: true, color: 'red', date: null},
            {id: 4, name: 'Ben', isActive: false, color: 'blue', date: null}
          ],
          container = document.getElementById('example1'),
          hot1,
          yellowRenderer,
          greenRenderer;

        yellowRenderer = function(instance, td, row, col, prop, value, cellProperties) {
          Handsontable.renderers.TextRenderer.apply(this, arguments);
          td.style.backgroundColor = 'yellow';

        };

        greenRenderer = function(instance, td, row, col, prop, value, cellProperties) {
          Handsontable.renderers.TextRenderer.apply(this, arguments);
          td.style.backgroundColor = 'green';

        };

        hot1 = new Handsontable(container, {
          data: data,
          startRows: 5,
          colHeaders: true,
          minSpareRows: 1,
          columns: [
            {data: "id", type: 'text'},
            // 'text' is default, you don't actually need to declare it
            {data: "name", renderer: yellowRenderer},
            // use default 'text' cell type but overwrite its renderer with yellowRenderer
            {data: "isActive", type: 'checkbox'},
            {data: "date", type: 'date', dateFormat: 'YYYY-MM-DD'},
            {data: "color",
              type: 'autocomplete',
              source: ["yellow", "red", "orange", "green", "blue", "gray", "black", "white"]
            }
          ],
          cell: [
            {row: 1, col: 0, renderer: greenRenderer}
          ],
          cells: function (row, col, prop) {
            if (row === 0 && col === 0) {
              this.renderer = greenRenderer;
            }
          }
        });"
content61="Anatomy of a cell type"
content62="A cell type is a predefined set of cell properties. Cell type defines what renderer, editor or validator
    should be used for a cell. They can also define any different cell property that will be assumed for
    each matching cell."
content63="For example, writing:"
content64="columns: [{
  type: 'password'
}]"
content65="Equals:"
content66="columns: [{
  editor: Handsontable.editors.PasswordEditor
  renderer: Handsontable.renderers.PasswordRenderer,
  copyable: false,
}]"
content67="Or using custom cell type definition:"
content68="Handsontable.cellTypes.registerCellType('custom', {
  renderer: Handsontable.renderers.TextRenderer,
  className: 'my-cell',
  readOnly: true,
  myCustomProperty: 'foo'
})"
content69="In Handsontable settings:"
content70="columns: [{
  type: 'custom'
}]"
content71="Equals:"
content72="columns: [{
  editor: false,
  renderer: Handsontable.renderers.TextRenderer,
  className: 'my-cell',
  readOnly: true,
  myCustomProperty: 'foo'
}]"
content73="src/cellTypes/"
content74="
      Help us improve this page
    "
