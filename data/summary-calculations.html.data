content1="The basic setup."
content2="Setting the destination cell"
content3="Setting the calculation range"
content4="Providing the settings as a function"
content5="Available calculations:"
content6="Sum"
content7="Min"
content8="Max"
content9="Count"
content10="Average"
content11="Custom"
content12="Additional options:"
content13="Forcing numeric values"
content14="Throwing datatype errors"
content15="Making destination cells read-only"
content16="Rounding values after the decimal point"
content17="
        var generateDataObj = function(rows, columns, additionalRows) {
          if (additionalRows === void 0) {
            additionalRows = true;
          }

          var data = [];
          var number = 0;

          if (!rows) {
            rows = 3;
          }
          if (!columns) {
            columns = 7;
          }

          for (var i = 0; i < rows; i++) {
            data[i] = [];
            for (var j = 0; j < columns; j++) {
              data[i][j] = number++;
            }
          }

          if (additionalRows) {
            for (i = 0; i < 2; i++) {
              data.push([]);
            }
          }

          return data;
        };"
content18="
        var example1 = document.getElementById('example1');

        var hot = new Handsontable(example1, {
          data: generateDataObj(),
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 4,
              destinationColumn: 1,
              type: 'min'
            },
            {
              destinationRow: 0,
              destinationColumn: 3,
              reversedRowCoords: true,
              type: 'max'
            },
            {
              destinationRow: 4,
              destinationColumn: 5,
              type: 'sum',
              forceNumeric: true
            }
          ]
        });"
content19="Basic setup"
content20="columnSummary"
content21="columnSummary"
content22="endpoint"
content23="columnSummary: [
  {
    destinationRow: 2,
    destinationColumn: 2,
    type: 'min',
    // other options...
  },
  {
    destinationRow: 3,
    destinationColumn: 3,
    type: 'max',
    // other options...
  }
]"
content24="Setting the destination cell"
content25="
        var container = document.getElementById('example-destination');

        var hot7 = new Handsontable(container, {
          data: generateDataObj(),
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 4,
              destinationColumn: 1,
              type: 'min'
            }
          ]
        });"
content26="reversedRowCoords"
content27="bottom"
content28="
        var container = document.getElementById('example-reverse');

        var hot1 = new Handsontable(container, {
          data: generateDataObj(),
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 1,
              destinationColumn: 4,
              reversedRowCoords: true,
              type: 'min'
            }
          ]
        });"
content29="Setting the calculation range"
content30="ranges"
content31="sourceColumn"
content32="ranges"
content33="array of arrays"
content34="0"
content35="1"
content36="2"
content37="3"
content38="4"
content39="6"
content40="8"
content41="9"
content42="
            var container = document.getElementById('example-range');

            var hot2 = new Handsontable(container, {
              data: generateDataObj(10, 3),
              colHeaders: true,
              rowHeaders: true,
              columnSummary: [
                {
                  ranges: [
                    [0, 4], [6], [8, 9]
                  ],
                  destinationRow: 0,
                  destinationColumn: 0,
                  reversedRowCoords: true,
                  type: 'sum',
                  forceNumeric: true
                }
              ]
            });"
content43="sourceColumn"
content44="
            var container = document.getElementById('example-sourceColumn');

            var hot3 = new Handsontable(container, {
              data: generateDataObj(5, 5),
              colHeaders: true,
              rowHeaders: true,
              columnSummary: [
                {
                  sourceColumn: 2,
                  destinationRow: 0,
                  destinationColumn: 0,
                  reversedRowCoords: true,
                  type: 'sum',
                  forceNumeric: true
                }
              ]
            });"
content45="Providing the settings as a function"
content46="1.8.1"
content47="Take a look at the example below:"
content48="
        var container = document.getElementById('example-functionConfig');

        var hot7 = new Handsontable(container, {
          data: generateDataObj(5, 5, false),
          rowHeaders: true,
          colHeaders: ['sum', 'min', 'max', 'count', 'average'],
          columnSummary: function() {
            var configArray = [];
            var summaryTypes = ['sum', 'min', 'max', 'count', 'average'];
            for (var i = 0; i < 5; i++) {
              configArray.push({
                sourceColumn: i,
                destinationRow: 0,
                destinationColumn: i,
                type: summaryTypes[i],
                forceNumeric: true
              });
            }

            return configArray;
          }
        });"
content49="Nested Rows plugin"
content50="Take a look at this simple demo:"
content51="
        var container = document.getElementById('example-nestedRows');

        var hot8 = new Handsontable(container, {
          data: [
            {
              value: null,
              __children: [
                {value: 5},
                {value: 6},
                {value: 7},
              ]
            },
            {
              __children: [
                {value: 15},
                {value: 16},
                {value: 17},
              ]
            }
          ],
          columns: [
            {data: 'value'}
          ],
          nestedRows: true,
          rowHeaders: true,
          colHeaders: ['sum', 'min', 'max', 'count', 'average'],
          columnSummary: function() {
            var endpoints = [];
            var nestedRowsPlugin = this.hot.getPlugin('nestedRows');
            var getRowIndex = nestedRowsPlugin.dataManager.getRowIndex.bind(nestedRowsPlugin.dataManager);
            var nestedRowsCache = null;
            var tempEndpoint = null;
            var resultColumn = 0;

            if (nestedRowsPlugin.isEnabled()) {
              nestedRowsCache = this.hot.getPlugin('nestedRows').dataManager.cache;
            } else {
              return;
            }

            for (var i = 0; i < nestedRowsCache.levels[0].length; i++) {
              tempEndpoint = {};

              if (!nestedRowsCache.levels[0][i].__children || nestedRowsCache.levels[0][i].__children.length === 0) {
                continue;
              }

              tempEndpoint.destinationColumn = resultColumn;
              tempEndpoint.destinationRow = getRowIndex(nestedRowsCache.levels[0][i]);
              tempEndpoint.type = 'sum';
              tempEndpoint.forceNumeric = true;
              tempEndpoint.ranges = [];

              tempEndpoint.ranges.push([
                getRowIndex(nestedRowsCache.levels[0][i].__children[0]),
                getRowIndex(nestedRowsCache.levels[0][i].__children[nestedRowsCache.levels[0][i].__children.length - 1])
              ]);

              endpoints.push(tempEndpoint);
              tempEndpoint = null;
            }


            return endpoints;
          }
        });"
content52="Available calculations"
content53="Sum"
content54="columnSummary: [
  {
    // ...
    type: 'sum'
  }
]"
content55="Min"
content56="Finds the lowest value in the specified column and row range."
content57="columnSummary: [
  {
    // ...
    type: 'min'
  }
]"
content58="Max"
content59="Finds the highest value in the specified column and row range."
content60="columnSummary: [
  {
    // ...
    type: 'max'
  }
]"
content61="Count"
content62="Counts the non-empty values in the specified column and row range."
content63="columnSummary: [
  {
    // ...
    type: 'count'
  }
]"
content64="Average"
content65="Calculates the average from the values in the specified column and row range."
content66="columnSummary: [
  {
    // ...
    type: 'average'
  }
]"
content67="Custom"
content68="Takes a custom function and applies ot to the values in the specified column and row range."
content69="columnSummary: [
  {
    // ...
    type: 'custom',
    customFunction: function(endpoint) {
      // endpoint is an object containing the endpoint data

      // your function
    }
  }
]"
content70="Example:"
content71="
        var container = document.getElementById('example-calculations');

        var hot4 = new Handsontable(container, {
          data: generateDataObj(5, 7),
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 0,
              destinationColumn: 0,
              reversedRowCoords: true,
              type: 'sum',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 1,
              reversedRowCoords: true,
              type: 'min',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 2,
              reversedRowCoords: true,
              type: 'max',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 3,
              reversedRowCoords: true,
              type: 'count',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 4,
              reversedRowCoords: true,
              type: 'average',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 5,
              reversedRowCoords: true,
              type: 'custom',
              customFunction: function(endpoint) {
                // this function counts the even values in the column

                var evenCount = 0;
                var hotInstance = this.hot;

                // helper function
                function checkRange(rowRange) {
                  var i = rowRange[1] || rowRange[0];
                  var counter = 0;

                  do {

                    if (parseInt(hotInstance.getDataAtCell(i, endpoint.sourceColumn), 10)%2 === 0) {
                      counter++;
                    }

                    i--;
                  } while (i >= rowRange[0]);
                  return counter;
                }

                // go through all declared ranges
                for (var r in endpoint.ranges) {
                  if (endpoint.ranges.hasOwnProperty(r)) {
                    evenCount += checkRange(endpoint.ranges[r]);
                  }
                }

                return evenCount;
              },
              forceNumeric: true
            }
          ]
        });"
content72="Additional options"
content73="Forcing numeric values"
content74="9a"
content75="9"
content76="forceNumeric"
content77="true"
content78="sum"
content79="disabled"
content80="
        var container = document.getElementById('example-forceNumeric');

        var hot5 = new Handsontable(container, {
          data: [
            [0, 1, 2],
            ['3c', '4', 5],
            [], []
          ],
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 0,
              destinationColumn: 0,
              reversedRowCoords: true,
              type: 'sum',
              forceNumeric: true
            },
            {
              destinationRow: 0,
              destinationColumn: 1,
              reversedRowCoords: true,
              type: 'sum',
              forceNumeric: true
            }
          ]
        });"
content81="Throwing datatype errors"
content82="suppressDataTypeErrors"
content83="false"
content84="suppressDataTypeErrors"
content85="true"
content86="columnSummary: [
  {
    // ...
    suppressDataTypeErrors: false
  }
]"
content87="Making the endpoint cells read-only"
content88="readOnly"
content89="true"
content90="true"
content91="Rounding values after the decimal point"
content92="roundFloat"
content93="
        var container = document.getElementById('example-round');

        var hot6 = new Handsontable(container, {
          data: [
            [0.5, 0.5],
            [0.5, 0.5],
            [1, 1],
            [],[]
          ],
          colHeaders: true,
          rowHeaders: true,
          columnSummary: [
            {
              destinationRow: 0,
              destinationColumn: 0,
              reversedRowCoords: true,
              type: 'average'
            },
            {
              destinationRow: 0,
              destinationColumn: 1,
              reversedRowCoords: true,
              type: 'average',
              roundFloat: 2
            }
          ]
        });"
content94="
      Help us improve this page
    "
