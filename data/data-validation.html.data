content1="Registering a validator"
content2="Full featured example"
content3="Registering a validator"
content4="When you create a validator, a good idea is to assign it as an alias that will refer to this particular validator function.
      Handsontable defines 5 aliases by default:"
content5="autocomplete"
content6="Handsontable.validators.AutocompleteValidator"
content7="date"
content8="Handsontable.validators.DateValidator"
content9="dropdown"
content10="Handsontable.validators.DropdownValidator"
content11="numeric"
content12="Handsontable.validators.NumericValidator"
content13="time"
content14="Handsontable.validators.TimeValidator"
content15="It gives users a convenient way for defining which validator should
      be used when table validation was triggered. User doesn't need to
      know which validator function is responsible for checking the cell value, he does
      not even need to know that there is any function at all. What is
      more, you can change the validator function associated with an alias without a
      need to change code that defines a table."
content16="Handsontable.validators.registerValidator()"
content17="validatorName"
content18="validator"
content19="validatorName"
content20="creditCardValidator"
content21="credit-card"
content22="Handsontable.validators.registerValidator('credit-card', creditCardValidator);"
content23="Choose aliases wisely. If you register your validator under name that is already registered, the target function will be
      overwritten:"
content24="Handsontable.validators.registerValidator('date', creditCardValidator);

// Now 'date' alias points to `creditCardValidator` function, not Handsontable.validators.DateValidator"
content25="So, unless you intentionally want to overwrite an existing alias, try to choose a unique name. A good practice is
      prefixing your aliases with some custom name (for example your GitHub username) to minimize the possibility of name
      collisions.
      This is especially important if you want to publish your validator, because you never know aliases has been
      registered by the user who uses your validator."
content26="Handsontable.validators.registerValidator('credit-card', creditCardValidator);

// Someone might already registered such alias"
content27="Handsontable.validators.registerValidator('my.credit-card', creditCardValidator);

// That's better."
content28="Using an alias"
content29="The final touch is to using the registered aliases, so that users can easily refer to it without the need
      to now the actual validator function is."
content30="To sum up, a well prepared validator function should look like this:"
content31="(function(Handsontable){
  function customValidator(query, callback) {
    // ...your custom logic of the validator

    callback(/* Pass `true` or `false` based on your logic */);
  }

  // Register an alias
  Handsontable.validators.registerValidator('my.custom', customValidator);

})(Handsontable);"
content32="customValidator"
content33="var hot = new Handsontable(document.getElementById('container'), {
  data: someData,
  columns: [
    {
      validator: 'my.custom'
    }
  ]
}); "
content34="Full featured example"
content35="validator"
content36="options page"
content37="beforeValidate"
content38="afterValidate"
content39="hooks page"
content40="email_validator_fn"
content41="allowInvalid"
content42="options page"
content43="beforeChange"
content44="hooks page"
content45="htInvalid"
content46="invalidCellClassName"
content47="// For whole table
...
invalidCellClassName: 'myInvalidClass',
...

// For specified columns
...
columns: [
  {data: 'firstName', invalidCellClassName: 'myInvalidClass'},
  {data: 'lastName', invalidCellClassName: 'myInvalidSecondClass'},
  {data: 'address'},
]
...
"
content48="[[row, col, oldValue, newValue], ...]"
content49="Edit the above grid to see callback"
content50="Note:"
content51="all validators"
content52="every"
content53="
        var people = [
              {id: 1, name: {first: 'Joe', last: 'Fabiano'}, ip: '0.0.0.1', email: 'Joe.Fabiano@ex.com'},
              {id: 2, name: {first: 'Fred', last: 'Wecler'}, ip: '0.0.0.1', email: 'Fred.Wecler@ex.com'},
              {id: 3, name: {first: 'Steve', last: 'Wilson'}, ip: '0.0.0.1', email: 'Steve.Wilson@ex.com'},
              {id: 4, name: {first: 'Maria', last: 'Fernandez'}, ip: '0.0.0.1', email: 'M.Fernandez@ex.com'},
              {id: 5, name: {first: 'Pierre', last: 'Barbault'}, ip: '0.0.0.1', email: 'Pierre.Barbault@ex.com'},
              {id: 6, name: {first: 'Nancy', last: 'Moore'}, ip: '0.0.0.1', email: 'Nancy.Moore@ex.com'},
              {id: 7, name: {first: 'Barbara', last: 'MacDonald'}, ip: '0.0.0.1', email: 'B.MacDonald@ex.com'},
              {id: 8, name: {first: 'Wilma', last: 'Williams'}, ip: '0.0.0.1', email: 'Wilma.Williams@ex.com'},
              {id: 9, name: {first: 'Sasha', last: 'Silver'}, ip: '0.0.0.1', email: 'Sasha.Silver@ex.com'},
              {id: 10, name: {first: 'Don', last: 'Pérignon'}, ip: '0.0.0.1', email: 'Don.Pérignon@ex.com'},
              {id: 11, name: {first: 'Aaron', last: 'Kinley'}, ip: '0.0.0.1', email: 'Aaron.Kinley@ex.com'}
            ],
            example1 = document.getElementById('example1'),
            example1console = document.getElementById('example1console'),
            settings1,
            ipValidatorRegexp,
            emailValidator;

        ipValidatorRegexp = /^(?:\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b|null)$/;
        emailValidator = function (value, callback) {
          setTimeout(function(){
            if (/.+@.+/.test(value)) {
              callback(true);
            }
            else {
              callback(false);
            }
          }, 1000);
        };

        settings1 = {
          data: people,
          beforeChange: function (changes, source) {
            for (var i = changes.length - 1; i >= 0; i--) {
              // gently don't accept the word "foo" (remove the change at index i)
              if (changes[i][3] === 'foo') {
                changes.splice(i, 1);
              }
              // if any of pasted cells contains the word "nuke", reject the whole paste
              else if (changes[i][3] === 'nuke') {
                return false;
              }
              // capitalise first letter in column 1 and 2
              else if ((changes[i][1] === 'name.first' || changes[i][1] === 'name.last') && changes[i][3].charAt(0)) {
                changes[i][3] = changes[i][3].charAt(0).toUpperCase() + changes[i][3].slice(1);
              }
            }
          },
          afterChange: function (changes, source) {
            if (source !== 'loadData') {
              example1console.innerText = JSON.stringify(changes);
            }
          },
          colHeaders: ['ID', 'First name', 'Last name', 'IP', 'E-mail'],
          columns: [
            {data: 'id', type: 'numeric'},
            {data: 'name.first'},
            {data: 'name.last'},
            {data: 'ip', validator: ipValidatorRegexp, allowInvalid: true},
            {data: 'email', validator: emailValidator, allowInvalid: false}
          ]
        };
        var hot = new Handsontable(example1, settings1);"
content54="
      Help us improve this page
    "
