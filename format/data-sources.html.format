<div class="static-content">
 <div class="index-list">
  <p>
   content1
  </p>
  <ul>
   <li>
    <a href="#page-array">
     content2
    </a>
   </li>
   <li>
    <a href="#page-array-hidden">
     content3
    </a>
   </li>
   <li>
    <a href="#page-object">
     content4
    </a>
   </li>
   <li>
    <a href="#page-column-func">
     content5
    </a>
   </li>
   <li>
    <a href="#page-nested">
     content6
    </a>
   </li>
   <li>
    <a href="#page-data-schema">
     content7
    </a>
   </li>
   <li>
    <a href="#page-property-schema">
     content8
    </a>
   </li>
  </ul>
  <p>
   <strong>
    content9
   </strong>
  </p>
 </div>
 <div class="example-container clearfix" name="array">
  <h3 id="page-array">
   content10
  </h3>
  <p>
   The most popular way of binding data with Handsontable is to use an
   <strong>
    content11
   </strong>
   .
  </p>
  <div data-jsfiddle="example1">
   <div class="hot" id="example1">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example1">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example1" data-instance="hot1" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example1">
    content12
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="array-hidden">
  <h3 id="page-array-hidden">
   content13
  </h3>
  <p>
   Let's say, you want the same data source, but without the
   <strong>
    content14
   </strong>
   column:
  </p>
  <div data-jsfiddle="example2">
   <div class="hot" id="example2">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example2">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example2" data-instance="hot2" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example2">
    content15
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="object">
  <h3 id="page-object">
   content16
  </h3>
  <p>
   You can use an
   <strong>
    content17
   </strong>
   as a data source.
  </p>
  <div data-jsfiddle="example3">
   <div class="hot" id="example3">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example3">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example3" data-instance="hot3" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example3">
    content18
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="nested">
  <h3 id="page-column-func">
   content19
  </h3>
  <p>
   You can define
   <strong>
    content20
   </strong>
   as a function. That could be a good choice, when do you want bind data more dynamically.
  </p>
  <div data-jsfiddle="example4">
   <div class="hot" id="example4">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example4">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example4" data-instance="hot4" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example4">
    content21
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="nested">
  <h3 id="page-nested">
   content22
  </h3>
  <p>
   Some people have nested objects. They can also be used at the data source with a little bit of column
      mapping. The mapping is done using the
   <strong>
    content23
   </strong>
   option.
  </p>
  <div data-jsfiddle="example5">
   <div class="hot" id="example5">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example5">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example5" data-instance="hot5" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example5">
    content24
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="dataschema">
  <h3 id="page-data-schema">
   content25
  </h3>
  <p>
   content26
  </p>
  <p>
   In case you want to start with an empty data source, you will need to provide the
   <strong>
    content27
   </strong>
   option that contains the data structure for any new row added to the grid.
      The below example shows custom data schema with an empty data source:
  </p>
  <div data-jsfiddle="example6">
   <div class="hot" id="example6">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example6">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example6" data-instance="hot6" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example6">
    content28
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-gap" name="propertyschema">
  <h3 id="page-property-schema">
   content29
  </h3>
  <p>
   If your
   <strong>
    content30
   </strong>
   is actually a constructor of an
      object that doesn't directly expose its members, like a Backbone.js
      model, you can specify functions for the
   <strong>
    content31
   </strong>
   member
      of each
   <strong>
    content32
   </strong>
   item.
  </p>
  <p>
   content33
  </p>
  <div data-jsfiddle="example7">
   <div class="hot" id="example7">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example7">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example7" data-instance="hot7" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example7">
    content34
   </script>
  </div>
 </div>
 <p class="gap-top-xsmall">
  <a class="edit-doc" href="https://github.com/handsontable/docs/edit/&lt;?js= version ?&gt;/tutorials/data-sources.html" target="_blank">
   content35
  </a>
 </p>
</div>
