<div class="static-content">
 <div class="index-list">
  <ul>
   <li>
    <a href="#page-registering-cell-type">
     content1
    </a>
   </li>
   <li>
    <a href="#page-preview">
     content2
    </a>
   </li>
   <li>
    <a href="#page-anatomy">
     content3
    </a>
   </li>
  </ul>
 </div>
 <div class="example-container head-gap clearfix" name="registering-cell-type">
  <h3 id="page-registering-cell-type">
   content4
  </h3>
  <p>
   content5
  </p>
  <ul>
   <li>
    <code>
     content6
    </code>
    for
    <code>
     content7
    </code>
   </li>
   <li>
    <code>
     content8
    </code>
    for
    <code>
     content9
    </code>
   </li>
   <li>
    <code>
     content10
    </code>
    for
    <code>
     content11
    </code>
   </li>
   <li>
    <code>
     content12
    </code>
    for
    <code>
     content13
    </code>
   </li>
   <li>
    <code>
     content14
    </code>
    for
    <code>
     content15
    </code>
   </li>
   <li>
    <code>
     content16
    </code>
    for
    <code>
     content17
    </code>
   </li>
   <li>
    <code>
     content18
    </code>
    for
    <code>
     content19
    </code>
   </li>
   <li>
    <code>
     content20
    </code>
    for
    <code>
     content21
    </code>
   </li>
   <li>
    <code>
     content22
    </code>
    for
    <code>
     content23
    </code>
   </li>
  </ul>
  <p>
   content24
  </p>
  <p>
   To register your own alias use
   <code>
    content25
   </code>
   function. It takes two arguments:
  </p>
  <ul>
   <li>
    <code>
     content26
    </code>
    - a string representing of the cell type object
   </li>
   <li>
    <code>
     content27
    </code>
    - an object with keys
    <code>
     content28
    </code>
    ,
    <code>
     content29
    </code>
    and
    <code>
     content30
    </code>
    that will be represented by
    <code>
     content31
    </code>
   </li>
  </ul>
  <p>
   If you'd like to register
   <code>
    content32
   </code>
   under alias
   <code>
    content33
   </code>
   you have to call:
  </p>
  <pre><code class="lang-javascript">content34</code></pre>
  <p>
   content35
  </p>
  <pre><code class="lang-javascript">content36</code></pre>
  <p>
   content37
  </p>
  <pre><code class="lang-javascript">content38</code></pre>
  <pre><br/><code class="lang-javascript">content39</code></pre>
  <h3 id="using-an-alias">
   content40
  </h3>
  <p>
   content41
  </p>
  <p>
   content42
  </p>
  <pre><code class="lang-javascript">content43</code></pre>
  <p>
   content44
  </p>
  <pre><code class="lang-javascript">content45</code></pre>
 </div>
 <div class="example-container clearfix" name="preview">
  <h3 id="page-preview">
   content46
  </h3>
  <p>
   content47
  </p>
  <ul>
   <li>
    content48
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-numeric.html">
     content49
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-checkbox.html">
     content50
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-date.html">
     content51
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-select.html">
     content52
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-dropdown.html">
     content53
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-autocomplete.html">
     content54
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-password.html">
     content55
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-handsontable.html">
     content56
    </a>
   </li>
   <li>
    <a href="/docs/&lt;?js= version ?&gt;/demo-custom-renderers.html">
     content57
    </a>
   </li>
  </ul>
  <p>
   The same example also shows the declaration of custom cell renderers, namely
   <code>
    content58
   </code>
   and
   <code>
    content59
   </code>
   .
  </p>
  <div data-jsfiddle="example1">
   <div class="hot" id="example1">
   </div>
  </div>
  <div class="codeLayout">
   <div class="buttons">
    <button class="jsFiddleLink" data-runfiddle="example1">
     <i class="fa fa-jsfiddle">
     </i>
     Edit
    </button>
    <button class="dump" data-dump="#example1" data-instance="hot" name="dump" title="Print current data source to console">
     <i class="fa fa-terminal">
     </i>
     Dump data to console
    </button>
   </div>
   <script data-jsfiddle="example1">
    content60
   </script>
  </div>
 </div>
 <div class="example-container clearfix head-hap" name="anatomy">
  <h3 id="page-anatomy">
   content61
  </h3>
  <p>
   content62
  </p>
  <p>
   content63
  </p>
  <pre><code class="lang-js">content64</code></pre>
  <p>
   content65
  </p>
  <pre><code class="lang-js">content66</code></pre>
  <p>
   content67
  </p>
  <pre><code class="lang-js">content68</code></pre>
  <p>
   content69
  </p>
  <pre><code class="lang-js">content70</code></pre>
  <p>
   content71
  </p>
  <pre><code class="lang-js">content72</code></pre>
  <p>
   This mapping is defined by files
   <a href="https://github.com/handsontable/handsontable/blob/master/src/cellTypes" target="_blank">
    content73
   </a>
  </p>
 </div>
 <p class="gap-top-xsmall">
  <a class="edit-doc" href="https://github.com/handsontable/docs/edit/&lt;?js= version ?&gt;/tutorials/cell-types.html" target="_blank">
   content74
  </a>
 </p>
</div>
